package command

import (
	"encoding/binary"
	"net"
)

// 用于发送一些指令给链接

// GetTypeID 获取 typeID
func GetTypeID(str string) int {
	var rtn int
	switch str {
	case "WindowAcknowledgementSize":
		rtn = 0x05
		break
	}
	return rtn
}

// SendWindowAcknowledgementSize 发送确认窗体
func SendWindowAcknowledgementSize(tcpConn *net.TCPConn, size int) error {
	var err error
	// 第一字节 00000010
	var buf = []byte{0x02}
	// timeStamp
	buf = append(buf, []byte{0, 0, 0}...)
	// bodySize
	buf = append(buf, []byte{0, 0, 4}...)
	// typeID
	buf = append(buf, 0x05)
	// streamID
	buf = append(buf, 0, 0, 0, 0)
	// body
	var body = make([]byte, 4)
	binary.BigEndian.PutUint32(body, uint32(size))
	buf = append(buf, body...)
	_, err = tcpConn.Write(buf)
	return err
}

// SendBandWidth 1
func SendBandWidth(tcpConn *net.TCPConn) error {
	var err error
	var buf = []byte{02, 00, 00, 00, 00, 00, 05, 06, 00, 00, 00, 00, 00, 0x4c, 0x4b, 0x40, 02}
	_, err = tcpConn.Write(buf)
	return err
}

// SendChunkSize 2
func SendChunkSize(tcpConn *net.TCPConn) error {
	var err error
	var buf = []byte{02, 00, 00, 00, 00, 00, 04, 01, 00, 00, 00, 00, 00, 00, 0x10, 00}
	_, err = tcpConn.Write(buf)
	return err
}

// SendSuccess 3
func SendSuccess(tcpConn *net.TCPConn) error {
	var err error
	var buf = []byte{
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x5f,
		0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x06, 0x66, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x02, 0x00, 0x0d, 0x46, 0x4d, 0x53, 0x2f, 0x33,
		0x2c, 0x30, 0x2c, 0x31, 0x2c, 0x31, 0x32, 0x33, 0x00, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
		0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x00, 0x40, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x09, 0x03, 0x00, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x02, 0x00, 0x06, 0x73, 0x74, 0x61,
		0x74, 0x75, 0x73, 0x00, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x02, 0x00, 0x1d, 0x4e, 0x65, 0x74, 0x43,
		0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
		0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x00, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
		0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
		0x69, 0x6f, 0x6e, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2e, 0x00, 0x0e,
		0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09}
	_, err = tcpConn.Write(buf)
	return err
}

// SendResult 4
func SendResult(tcpConn *net.TCPConn) error {
	var err error
	var buf = []byte{
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x14, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x5f,
		0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	_, err = tcpConn.Write(buf)
	return err
}

// SendOnstatus 3
func SendOnstatus(tcpConn *net.TCPConn) error {
	var err error
	var buf = []byte{
		0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x14, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x6f,
		0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x03, 0x00, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x02, 0x00, 0x06, 0x73, 0x74, 0x61, 0x74,
		0x75, 0x73, 0x00, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x02, 0x00, 0x17, 0x4e, 0x65, 0x74, 0x53, 0x74,
		0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2e, 0x53, 0x74, 0x61,
		0x72, 0x74, 0x00, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02,
		0x00, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69,
		0x6e, 0x67, 0x00, 0x00, 0x09}
	_, err = tcpConn.Write(buf)
	return err
}
